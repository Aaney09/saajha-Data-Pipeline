config {
    type: "table",
    tags: "IE",
    description: "IE result failure tracking for the assessed children"
    }


with 
hindi as (select distinct AssesseeActorId,Date(AssessmentTakenOn)dateOfAssessment,if(Level= "BEGINNER",0,safe_cast(regexp_extract(Level,r'\d') as int64)) as hindiLevel
from ${ref("assessment")}
where QuestionText like "%Ask%" and AssessmentId<>6
qualify row_number() over(partition by AssesseeActorId,date(AssessmentTakenOn) order by AssessmentTakenOn desc)=1
)
, math as (select distinct AssesseeActorId,Date(AssessmentTakenOn)dateOfAssessment, if(Level= "BEGINNER",0,safe_cast(regexp_extract(Level,r'\d') as int64)) as mathlevel
from ${ref("assessment")}
where QuestionText not like  "%Ask%" and AssessmentId <> 6
qualify row_number() over(partition by AssesseeActorId,date(AssessmentTakenOn) order by AssessmentTakenOn desc)=1
)

, childDetails as (select 
distinct 
IEId as childid, OnBoardedUserId as parentid,ProjectId as ProjectId,
safe_cast(regexp_extract(Education,r'\d+') as int64)as childClass,Education
from ${ref("IE")}
where  projectid=1103912
)

, assessments as (
  select *, dateOfAssessment+1 as hindi_content_to_send_on,dateOfAssessment+2 as math_content_to_send_on,
  case  
when c.childClass = 1 and mathLevel>=2 then TRUE
when c.childClass = 2 and mathLevel>=3 then TRUE
when c.childClass >=3 and mathLevel>=4 then TRUE
Else false
end mathFLnAchievedClassWise,
case  
when c.childClass = 1 and hindiLevel>=3 then TRUE
when c.childClass >=2 and hindiLevel>=4 then TRUE
Else false
end hindiFLnAchievedClassWise
from hindi h
inner join math m
using(assesseeActorID,dateOfAssessment)
inner join childDetails c
on assesseeActorID=childid
-- where m.dateOfAssessment between "2025-05-01" and current_date("Asia/Kolkata")-3
)



, allNumbersPIDtemplatesent as (
  select distinct phone_number,rosterparentid as parentid,number,template_name,sent_at,date(sent_at)sent_date,last_message_status,error_code,error_reason,template_meta_data, 
  from ${ref("allPhoneNumberWithPid")}
  inner join ${ref("IE_template_sent")}
  on number = phone_number
  where number is not null
  and date(sent_at)>="2025-04-01"

)

,combinedResult as (
  select distinct parentid,
  phone_number,
  sent_at as combined_Result_sent_on,last_message_status as combined_Result_msg_status,error_code as combined_result_error_code,error_reason as combined_result_error_reason,
  from allNumbersPIDtemplatesent
  where 
 template_name like "%fln_result_v2%" or template_name like "%fln_highest_level_v2%"
)


,result_sent_for_assessed as (
  select distinct a.*,m.*except(parentid),
from assessments a
left join combinedResult m
on a.parentid = m.parentid and
date(combined_Result_sent_on) BETWEEN dateOfAssessment AND DATE_ADD(dateOfAssessment,INTERVAL 1 DAY)

)
,result_success as (
  select distinct parentid as success_pid,
  combined_Result_sent_on
  from result_sent_for_assessed ra
  where combined_Result_msg_status <> 'failed'
)

,assessed_result_sent_and_success_result as (
  select distinct ra.*,success_pid,m.cohort
  from result_sent_for_assessed ra
  left join result_success RS
  on ra.parentid = success_pid 
  AND DATE(RS.combined_Result_sent_on) BETWEEN DATEOFASSESSMENT AND DATE_ADD(dateOfAssessment,INTERVAL 1 DAY)
  left join   ${ref("impact_evaluation_main_data")} m
  on ra.parentid=m.parentid
)




select  dateOfAssessment,
m.cohort,
count(distinct m.parentid)ParentIdAssessed,
    count(distinct m.childid)ChildiAssessed,
    count(distinct m.parentid) as result_tobe_processed,
    count(distinct if(m.combined_Result_sent_on is not null ,m.parentid,null) ) processedResultsCombinedAsWellFLNAchieved,
    round(
      (count(distinct m.parentid)-count(distinct if(m.combined_Result_sent_on is not null ,m.parentid,null) )
    ) / nullif(count(distinct m.parentid),0)*100,2) turn_result_failure_Rate,
    count(distinct if(combined_result_msg_status="failed" and success_pid is null ,m.parentid,null))metaFailed_ResultsCombinedAsWellFLNAchieved,

    round(count(distinct if(combined_result_msg_status="failed" and success_pid is null,m.parentid,null))/nullif(count(distinct if(m.combined_Result_sent_on is not null ,m.parentid,null) ),0)*100
    ,2) meta_failure_rate,
    round(
    (  
      count(distinct if(combined_result_msg_status="failed" and success_pid is null,m.parentid,null))
      +
      count(distinct m.parentid)-count(distinct if(m.combined_Result_sent_on is not null,m.parentid,null) )
    )
      /nullif(count(distinct m.parentid),0)*100
    ,2)combined_result_and_fln_Achieved_failure_rate,

       /** result meta error details **/
       count(distinct if(m.combined_result_msg_status="failed" and success_pid is null,m.parentid,null))combined_result_meta_failed,
      count(distinct if(m.combined_result_error_code="131050" and success_pid is null,m.parentid,null)) as combined_result_131050_User_has_stopped_reciept_of_marketing_messages,
      count(distinct if(combined_result_error_code="131049" and success_pid is null,m.parentid,null)) as combined_result_131049_Meta_chose_not_to_deliver,
      count(distinct if(combined_result_error_code="131026" and success_pid is null ,m.parentid,null)) as combined_result_131026_Message_Undeliverable,
       count(distinct if(combined_result_error_code="131000" and success_pid is null,m.parentid,null)) as combined_result_131000_Something_went_wrong,
      count(distinct if(combined_result_error_code="130472" and success_pid is null ,m.parentid,null)) as combined_result_130472_User_number_is_part_of_an_experiment,

from assessed_result_sent_and_success_result m

group by all
order by dateOfAssessment desc

