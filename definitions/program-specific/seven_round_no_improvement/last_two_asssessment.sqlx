config {
    type:"table"
}
with hindiAss as (select distinct AssesseeActorId,date(AssessmentTakenOn)hindiAssessDate,level as hindiLevel,AssessmentInstanceAssesseDRId
from ${ref("assessment")}
where QuestionText like "%Ask%" and date(AssessmentTakenOn) between "2024-04-01" and "2025-03-31")

,
hindiDates  as(select distinct assesseeActorId,hindiAssessDate,
lag(date(hindiAssessDate)) over (partition by AssesseeActorId order by hindiAssessDate asc)hindiLagDate,
from (
  select distinct assesseeActorId,hindiAssessDate 
  from hindiAss
  order by hindiAssessDate asc)
order by assesseeActorid asc,hindiAssessDate asc,hindiLagDate asc)

,
hindiData as ((select *,if(hindiLagDate is null, 0,date_diff(hindiDates.hindiAssessDate,hindiLagDate,day)) hindidateDifference,
from hindiDates
where if(hindiLagDate is null, 0,date_diff(hindiDates.hindiAssessDate,hindiLagDate,day))=0)

UNION ALL
(select *,if(hindiLagDate is null, 0,date_diff(hindiDates.hindiAssessDate,hindiLagDate,day)) hindidateDifference,
from hindiDates
where if(hindiLagDate is null, 0,date_diff(hindiDates.hindiAssessDate,hindiLagDate,day))>=25)
order by assesseeActorId  desc)

, hindi as (select *, row_number() over(partition by assesseeActorId order by hindiAssessDate desc)hindirounds
from hindiData
order by assesseeActorId asc,hindirounds asc)
,lasthindiQuestion as (select distinct 
AssesseeActorId,date(AssessmentTakenOn) dateofHindiAssessment,
max(AssessmentInstanceAssesseDRId)lastHindiQuestionId
from ${ref("assessment")}
where QuestionText like "%Ask%" and date(AssessmentTakenOn) between "2024-04-01" and "2025-03-31"
group by AssesseeActorId,dateofHindiAssessment
)

,hindiLevel as (
  select lhq.*,h.hindiLevel
  from lasthindiQuestion lhq
  inner join
  hindiAss h
  on h.assesseeActorId =lhq.assesseeActorId and h.AssessmentInstanceAssesseDRId = lhq.lastHindiQuestionId
)

,hindiAssessmentData as (select h.*,hl.hindiLevel
from hindi h
inner join hindiLevel hl
on h.assesseeActorId= hl.assesseeActorId and h.hindiAssessDate= hl.dateofHindiAssessment
)

, mathAss as (select distinct AssesseeActorId,date(AssessmentTakenOn)mathAssessDate,level as mathLevel,AssessmentInstanceAssesseDRId
from ${ref("assessment")}
where QuestionText not like "%Ask%" and date(assessmentTakenOn) between "2024-04-01" and "2025-03-31")

, mathDates as
(select distinct assesseeActorId,mathAssessDate,
lag(date(mathAssessDate)) over (partition by AssesseeActorId order by mathAssessDate asc)mathLagDate,
from (select distinct assesseeActorId,mathAssessDate
from
mathAss
order by mathAssessDate asc)
order by assesseeActorid asc,mathAssessDate asc,mathLagDate asc)

, mathData as((select *,if(mathLagDate is null, 0,date_diff(mathDates.mathAssessDate,mathLagDate,day)) mahtdateDifference,
from mathDates
where if(mathLagDate is null, 0,date_diff(mathDates.mathAssessDate,mathLagDate,day))=0)

UNION ALL
(select *,if(mathLagDate is null, 0,date_diff(mathDates.mathAssessDate,mathLagDate,day)) mathdateDifference,
from mathDates
where if(mathLagDate is null, 0,date_diff(mathDates.mathAssessDate,mathLagDate,day))>=25)
order by assesseeActorId  desc)

, math as
(select *, row_number() over(partition by assesseeActorId order by mathAssessDate desc)mathrounds
from mathData
order by assesseeActorId asc,mathrounds asc)


,lastmathQuestion as (select distinct 
AssesseeActorId,date(AssessmentTakenOn) dateofmathAssessment,
max(AssessmentInstanceAssesseDRId)lastmathQuestionId
from ${ref("assessment")}
where QuestionText not like "%Ask%" and AssessmentId <> 6 and date(AssessmentTakenOn) between "2024-04-01" and "2025-03-31"
group by AssesseeActorId,dateofmathAssessment
)

,mathLevel as (
  select lmq.*,m.mathlevel
  from lastmathQuestion lmq
  inner join
  mathAss m
  on m.assesseeActorId =lmq.assesseeActorId and m.AssessmentInstanceAssesseDRId = lmq.lastmathQuestionId
)
,
mathAssessmentData as (select m.*,ml.mathlevel
from math m
inner join mathLevel ml
on m.assesseeActorId= ml.assesseeActorId and m.mathAssessDate= ml.dateofmathAssessment)

, hindiMath as (select md.*, hd.*Except(assesseeActorId)
from hindiAssessmentData hd
inner join
mathAssessmentData md
on md.assesseeActorId = hd.assesseeactorId
and md.mathrounds = hd.hindirounds
)
,
assessmentDetails as 
(select *

from
(select distinct assesseeActorid,mathassessdate m1,hindiAssessDate h1,greatest(hindiAssessDate,mathAssessDate)last_assessment_date,hindiLevel as last_hindiLevel,mathLevel
as last_mathlevel 
from hindimath
where hindiRounds=1)r1


left join
(select distinct  assesseeActorid,
mathAssessDate m2,hindiAssessDate h2,
greatest(mathassessdate,hindiAssessDate)second_last_Assessment_date,hindiLevel as second_last_hindiLevel,mathLevel as second_last_mathlevel
from hindiMath
where hindiRounds=2)r2
using(assesseeActorid) 
)

select distinct a.assesseeActorId, last_Assessment_date,last_hindiLevel,last_mathlevel,second_last_Assessment_date,second_last_hindiLevel,second_last_mathlevel,rosterparentId,number
from assessmentDetails a
inner join `platform_commons.IE` c
on assesseeActorId = ieid
left join `dataform.allPhoneNumberWithPid`
on c.onboardedUserId = rosterparentId
where number is not null