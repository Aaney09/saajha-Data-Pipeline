config {
    type:"table"
}

WITH MonthWiseHindiAssessed AS (
  SELECT
    AssesseeActorId AS ChildID,
    EXTRACT(Month FROM assessmentTakenOn) AS Month,
    EXTRACT(year FROM assessmentTakenOn) AS year,
    DATE(TIMESTAMP_TRUNC(assessmenttakenOn, month)) as month_year,
    MAX(AssessmentInstanceAssesseId) AS hindiAssessmentID
  FROM ${ref("assessment")}
  WHERE 
  regexp_contains(QuestionText,'Ask') and date(assessmenttakenon) <="2024-07-31"
  GROUP BY all
  ORDER BY 1
),
MonthWiseMathAssessed AS (
  SELECT
    AssesseeActorId AS ChildID,
    EXTRACT(Month FROM assessmentTakenOn) AS Month,
    EXTRACT(year FROM assessmentTakenOn) AS year,
    DATE(TIMESTAMP_TRUNC(assessmentTakenOn, month)) as month_year,
    MAX(AssessmentInstanceAssesseId) AS mathAssessmentID
  FROM ${ref("assessment")}
  WHERE 
  not regexp_contains(QuestionText,'Ask') and date(assessmenttakenon) <="2024-07-31"
  GROUP BY all
  ORDER BY 1
),
bothSUb as (
select *
from MonthWiseMathAssessed
inner join MonthWiseHindiAssessed
using(ChildID,month_year)
)
,assessed_7_above as (select childid,count(distinct month_year)unique_months_assessed
from bothSUb
group by all 
having unique_months_assessed>=7
order by 2 desc)

,assessmentFirsthindi_Mon_year as (
  select childid,min(month_year)firstAssesMY, max(month_year)lastHindiAssessedMY 
  from bothSUb
  group by all
)

, hindiass as  (select distinct AssesseeActorId,
first_value(date(TIMESTAMP_TRUNC(assessmentTakenOn, month)) )Over(partition by assesseeActorId order by AssessmentTakenOn asc ROWS between unbounded preceding and unbounded following)firstAssessedMonthYearHindi,
first_value(if(level='BEGINNER',0, SAFE_CAST(REGEXP_EXTRACT(Level,'[0-9]') as int64) ))Over(partition by assesseeActorId order by AssessmentTakenOn asc ROWS between unbounded preceding and unbounded following)firsthindiLevel,
last_value(date(TIMESTAMP_TRUNC(assessmentTakenOn, month)) )Over(partition by assesseeActorId order by AssessmentTakenOn asc ROWS between unbounded preceding and unbounded following)lastAssessedMonthYearHindi,
last_value(if(level='BEGINNER',0, SAFE_CAST(REGEXP_EXTRACT(Level,'[0-9]') as int64) ))Over(partition by assesseeActorId order by AssessmentTakenOn asc ROWS between unbounded preceding and unbounded following)lasthindiLevel
from ${ref("assessment")}
where regexp_contains(QuestionText,'Ask') and date(assessmenttakenon) <="2024-07-31" and AssessmentId <> 6)

,hindiLevelNotImproved as (
select *,lasthindiLevel-firstHindiLevel as hindi_last_level_minus_first_level,if(lasthindiLevel=4 and firstHindiLevel=4,"Yes","No")isHighestInFirstAndLastAssessHindi
from hindiass
where firstHindiLevel>=lasthindiLevel 


)

, mathass as  (select distinct AssesseeActorId,
first_value(date(TIMESTAMP_TRUNC(assessmentTakenOn, month)) )Over(partition by assesseeActorId order by AssessmentTakenOn asc ROWS between unbounded preceding and unbounded following)firstAssessedMonthYearMath,
first_value(if(level='BEGINNER',0, SAFE_CAST(REGEXP_EXTRACT(Level,'[0-9]') as int64) ))Over(partition by assesseeActorId order by AssessmentTakenOn asc ROWS between unbounded preceding and unbounded following)firstmathLevel,
last_value(date(TIMESTAMP_TRUNC(assessmentTakenOn, month)) )Over(partition by assesseeActorId order by AssessmentTakenOn asc ROWS between unbounded preceding and unbounded following)lastAssessedMonthYearMath,
last_value(if(level='BEGINNER',0, SAFE_CAST(REGEXP_EXTRACT(Level,'[0-9]') as int64) ))Over(partition by assesseeActorId order by AssessmentTakenOn asc ROWS between unbounded preceding and unbounded following)lastmathLevel
from ${ref("assessment")}
where not regexp_contains(QuestionText,'Ask') and date(assessmenttakenon) <="2024-07-31" and AssessmentId <> 6)

,mathLevelNotImproved as (
select *,lastmathLevel-firstmathLevel as math_last_level_minus_first_level,if(firstmathLevel=4 and lastmathLevel = 4,"Yes","No")isHighestInFirstAndLastAssessMath
from mathass
where firstmathLevel>=lastmathLevel)

,combinedChildrenNotImprovedYET as (
select *
from (select distinct assesseeActorId
from mathLevelNotImproved
where isHighestInFirstAndLastAssessMath="No")
Union distinct 
select *
from (select distinct assesseeActorId
from hindiLevelNotImproved
where isHighestInFirstAndLastAssessHindi="No"))

, com_7ass as (select distinct *
from assessed_7_above
inner join combinedChildrenNotImprovedYET
on childid=assesseeActorid)

, NotImprovedAssess7MonthAbove as (select * except(assesseeActorId)
from com_7ass
assessed_7_above
left join mathLevelNotImproved m
on childid=m.assesseeActorid
left join hindiLevelNotImproved h
on childid=h.assesseeActorid)
-- where firstmathLevel is not null and firsthindiLevel is not null
, sc_raw as (select distinct parent_phone_number,safe_cast(school_id as int64)school_id, char_length(safe_cast(school_id as string))charLength
from `opt_in_records.enrolled_wa_parents`)

,pId_schoo_id as (select distinct rosterparentId,school_id
from sc_raw 
inner join `dataform.allPhoneNumberWithPid`
on parent_phone_number=number
where school_id is not null and charLength>=7)

,parentDetails as (
  select distinct IEId,OnBoardedUserDisplayName as parentName,OnBoardedUserId
  FROM `platform_commons.IE`
  where ProjectId in(1103005,1103213)
)
,opt_out as (
  select distinct parentid as opt_pid
  from `dataform.opted_out`
)

,nums as (
  select distinct rosterparentid, number as phone_numbers
  from `dataform.allPhoneNumberWithPid`
  where number is not null
)
select distinct *except(rosterparentid,ieid,onboardeduserid,opt_pid),onboardeduserid as parentid,
from NotImprovedAssess7MonthAbove n
inner join parentDetails p
on n.childid=p.ieid
left join opt_out o
on p.OnBoardedUserId=o.opt_pid
left join pId_schoo_id s
on p.OnBoardedUserId=s.rosterparentid
left join nums
on p.OnBoardedUserId=nums.rosterparentid
where opt_pid is null
