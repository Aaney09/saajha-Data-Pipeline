config {
    type: "table",
    tags: ["call_daily"],
    description: "from april 2025 till march 31st 2026"
    }
-- till_march31st2025

with hindiAss as (select distinct AssesseeActorId,date(AssessmentTakenOn)hindiAssessDate,if(Level= "BEGINNER",0,safe_Cast(right(Level,1) as int64))as hindiLevel,AssessmentInstanceAssesseDRId,QuestionText

from ${ref("assessment")}
inner join ${ref("IE")} 
on assesseeactorid=ieid
where QuestionText  like "%Ask%" and date(AssessmentTakenOn) between "2025-04-01" and "2026-03-31"
-- and projectid <> 1103912
qualify row_number()over(partition by assesseeActorid,date(AssessmentTakenOn) order by AssessmentTakenOn desc)=1)

,
hindiDates  as(select distinct assesseeActorId,hindiAssessDate,hindiAss.hindiLevel,
lag(date(hindiAssessDate)) over (partition by AssesseeActorId order by hindiAssessDate asc)hindiLagDate,
from hindiAss
)

,
hindiData as (select *,if(hindiLagDate is null, 0,date_diff(hindiDates.hindiAssessDate,hindiLagDate,day)) hindidateDifference,row_number() over(partition by assesseeActorId order by hindiAssessDate asc)hindirounds
from hindiDates
where if(hindiLagDate is null, 0,date_diff(hindiDates.hindiAssessDate,hindiLagDate,day))=0 or date_diff(hindiDates.hindiAssessDate,hindiLagDate,day)>=25
)


, mathAss as (select distinct AssesseeActorId,date(AssessmentTakenOn)mathAssessDate,
if(Level= "BEGINNER",0,safe_Cast(right(Level,1) as int64))as mathLevel,AssessmentInstanceAssesseDRId,QuestionText
from ${ref("assessment")}
inner join ${ref("IE")}
on assesseeactorid=ieid
where QuestionText not like "%Ask%" and date(AssessmentTakenOn) between "2025-04-01" and "2026-03-31"
-- and projectid<>1103912
qualify row_number()over(partition by assesseeActorid,date(AssessmentTakenOn) order by AssessmentTakenOn desc)=1
)

, mathDates as
(select distinct assesseeActorId,mathAssessDate,mathLevel,
lag(date(mathAssessDate)) over (partition by AssesseeActorId order by mathAssessDate asc)mathLagDate,
from
mathAss
)

, mathData as(select *,if(mathLagDate is null, 0,date_diff(mathDates.mathAssessDate,mathLagDate,day)) mathdateDifference,row_number() over(partition by assesseeActorId order by mathAssessDate asc)mathrounds,
from mathDates
where if(mathLagDate is null, 0,date_diff(mathDates.mathAssessDate,mathLagDate,day))=0 or date_diff(mathDates.mathAssessDate,mathLagDate,day)>=25)



, hindiMath as (select md.*, hd.*Except(assesseeActorId)
from hindiData hd
inner join
mathData md
on md.assesseeActorId = hd.assesseeactorId
and md.mathrounds = hd.hindirounds
)


,highestMathAssessment as (select assesseeActorId, count(distinct mathAssessDate)c,count(distinct mathRounds)highestRound
from mathData
group by 1
order by c asc)

,highestHindiAssessment as (
  select assesseeActorId,count(distinct hindiAssessDate)c,max(hindirounds)highestRound
  from hindiData
  group by 1
  order by c desc
)


,mfirstlevel as (select distinct assesseeActorId,mathLevel as firstmathLevel
from mathAss
qualify row_number()over(partition by assesseeActorid order by mathAssessDate asc)=1)

,mLastLevel as (
  select distinct AssesseeActorId, mathLevel as lastmathLevel,
  from mathAss
  qualify row_number()over(partition by assesseeActorid order by mathAssessDate desc)=1
)


,hfirstLevel as (
  select distinct assesseeActorId,
  hindiLevel as firstHindiLevel
  from hindiAss
  qualify row_number()over(partition by assesseeActorid order by hindiAssessDate asc)=1
)
,hLastLevel as (
  select distinct AssesseeActorId, hindiLevel as lastHindiLevel,
  from hindiAss
  qualify row_number()over(partition by assesseeActorid order by hindiAssessDate desc)=1
)



,hindiImprovedWithMin3Assess as (select distinct *
from hfirstlevel
Inner join hlastLevel
using(assesseeActorId)
inner join highestHindiAssessment hig
using(assesseeActorId)
where highestRound>=3 and lastHindiLevel>firstHindiLevel
)


,hindiImprovedWithMin3AssessCOunts as (select distinct count(assesseeActorId)hindiImprovedCounts
from hindiImprovedWithMin3Assess)

,hindiImprovedatLeast2LevelWithMin3Assess as (select distinct *
from hfirstlevel
Inner join hlastLevel
using(assesseeActorId)
inner join highestHindiAssessment hig
using(assesseeActorId)
where highestRound>=3 and (lastHindiLevel-firstHindiLevel)>=2
)

,hindiImprovedatLeast2LevelWithMin3AssessCOunts as (select distinct count(distinct assesseeActorId)hindiImprovedCountstLeast2Level
from hindiImprovedatLeast2LevelWithMin3Assess)


,mathImprovedWithMin3Assess as(
  select distinct *
from mfirstlevel
Inner join mlastLevel
using(assesseeActorId)
inner join highestMathAssessment
using(assesseeActorId)
where highestRound>=3 and lastmathLevel>firstmathLevel
)


,mathImprovedWithMin3AssessCOunts as (select count(distinct assesseeActorId)mathImprovedCounts
from mathImprovedWithMin3Assess)


,mathImprovedatLeast2LevelWithMin3Assess as(
  select distinct *
from mfirstlevel
Inner join mlastLevel
using(assesseeActorId)
inner join highestMathAssessment
using(assesseeActorId)
where highestRound>=3 and (lastMathLevel-firstMathLevel)>=2
)

,mathImprovedatLeast2LevelWithMin3AssessCOunts as (select count(distinct assesseeActorId)mathImprovedCountstLeast2Level
from mathImprovedatLeast2LevelWithMin3Assess)

,hindiMin3AssessmentCounts as (
  select count( distinct assesseeActorId)atLeast3HindiAssessment
from highestHindiAssessment
where highestRound >= 3
)
,mathMin3AssessmentCounts as(
  select count( distinct assesseeActorId)atLeast3MathAssessment
from highestMathAssessment
where highestRound >= 3
)

-- -- counts of levels improved in hindi or math
select * 
from hindiImprovedWithMin3AssessCOunts
cross join mathImprovedWithMin3AssessCOunts
cross join mathMin3AssessmentCounts
cross join hindiMin3AssessmentCounts
cross join mathImprovedatLeast2LevelWithMin3AssessCOunts
cross join hindiImprovedatLeast2LevelWithMin3AssessCOunts

-- select *
-- from mathImprovedatLeast2LevelWithMin3Assess
--  hindiImprovedatLeast2LevelWithMin3Assess

